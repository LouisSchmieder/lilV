ast.File{
    stmts: [ast.Stmt(ast.ModuleStmt{
        pos: token.Position{
            file: './tests/functions.v'
            line_nr: 0
            char_nr: 0
        }
        name: 'test'
    }), ast.Stmt(ast.FunctionStmt{
        pos: token.Position{
            file: './tests/functions.v'
            line_nr: 2
            char_nr: 3
        }
        is_pub: false
        name: 'test'
        ret: types.Type{
            mod: ''
            name: 'int'
            tname: 'int'
            bname: 'int'
            kind: struct_
        }
        parameter: [ast.Parameter{
            pos: token.Position{
                file: './tests/functions.v'
                line_nr: 2
                char_nr: 9
            }
            typ: types.Type{
                mod: ''
                name: 'i8'
                tname: 'i8'
                bname: 'i8'
                kind: struct_
            }
            name: 'test'
        }]
        attrs_pos: token.Position{
            file: './tests/functions.v'
            line_nr: 2
            char_nr: 0
        }
        attrs: []
        mod: ''
        stmts: []
    }), ast.Stmt(ast.FunctionStmt{
        pos: token.Position{
            file: './tests/functions.v'
            line_nr: 5
            char_nr: 3
        }
        is_pub: false
        name: 'main'
        ret: types.Type{
            mod: ''
            name: 'void'
            tname: 'void'
            bname: 'void'
            kind: struct_
        }
        parameter: []
        attrs_pos: token.Position{
            file: './tests/functions.v'
            line_nr: 4
            char_nr: 0
        }
        attrs: [ast.Attribute{
            name: 'test'
            name_kind: string
            has_arg: true
            arg: '123'
            arg_kind: number
        }, ast.Attribute{
            name: 'abc'
            name_kind: name
            has_arg: false
            arg: ''
            arg_kind: string
        }]
        mod: ''
        stmts: [ast.Stmt(ast.FunctionCallStmt{
            pos: token.Position{
                file: './tests/functions.v'
                line_nr: 6
                char_nr: 1
            }
            mod: ''
            name: 'test'
            params: [ast.Expr(ast.NumberExpr{
                pos: token.Position{
                    file: './tests/functions.v'
                    line_nr: 6
                    char_nr: 7
                }
                num: '123'
            })]
        })]
    })]
    table: &types.Table{
        types: [types.Type{
            mod: ''
            name: 'i8'
            tname: 'i8'
            bname: 'i8'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'i16'
            tname: 'i16'
            bname: 'i16'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'int'
            tname: 'int'
            bname: 'int'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'i64'
            tname: 'i64'
            bname: 'i64'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'u8'
            tname: 'u8'
            bname: 'u8'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'u16'
            tname: 'u16'
            bname: 'u16'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'u32'
            tname: 'u32'
            bname: 'u32'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'u64'
            tname: 'u64'
            bname: 'u64'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'string'
            tname: 'string'
            bname: 'string'
            kind: struct_
        }, types.Type{
            mod: ''
            name: 'void'
            tname: 'void'
            bname: 'void'
            kind: struct_
        }]
        type_idx: {'i8': 0, 'i16': 1, 'int': 2, 'i64': 3, 'u8': 4, 'u16': 5, 'u32': 6, 'u64': 7, 'string': 8, 'void': 9}
    }
}