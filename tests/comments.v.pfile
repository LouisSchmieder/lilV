ast.File{
    mod: 'main'
    stmts: [ast.Stmt(ast.ModuleStmt{
        pos: token.Position{
            file: './tests/comments.v'
            line_nr: 0
            char_nr: 0
        }
        name: 'main'
    }), ast.Stmt(ast.ImportStmt{
        pos: token.Position{
            file: './tests/comments.v'
            line_nr: 2
            char_nr: 0
        }
        mod: 'test'
        has_as: true
        alias: 'abc'
    }), ast.Stmt(ast.CommentStmt{
        pos: token.Position{
            file: './tests/comments.v'
            line_nr: 4
            char_nr: 0
        }
        multiline: false
        msg: '// test
'
    }), ast.Stmt(ast.CommentStmt{
        pos: token.Position{
            file: './tests/comments.v'
            line_nr: 5
            char_nr: 0
        }
        multiline: false
        msg: '/* test */'
    }), ast.Stmt(ast.FunctionStmt{
        pos: token.Position{
            file: './tests/comments.v'
            line_nr: 7
            char_nr: 7
        }
        is_pub: true
        name: 'main'
        ret: types.Type{
            mod: ''
            name: 'void_'
            tname: 'void_'
            bname: 'void_'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'void'
            })
            is_array: false
        }
        parameter: []
        attrs_pos: token.Position{
            file: './tests/comments.v'
            line_nr: 7
            char_nr: 0
        }
        attrs: []
        mod: 'main'
        stmts: []
    })]
    table: &types.Table{
        types: [types.Type{
            mod: ''
            name: 'i8'
            tname: 'i8'
            bname: 'i8'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed char'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'i16'
            tname: 'i16'
            bname: 'i16'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed short'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'int'
            tname: 'int'
            bname: 'int'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed long'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'i64'
            tname: 'i64'
            bname: 'i64'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed long long'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'byte'
            tname: 'byte'
            bname: 'byte'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned char'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'u16'
            tname: 'u16'
            bname: 'u16'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned short'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'u32'
            tname: 'u32'
            bname: 'u32'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned long'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'u64'
            tname: 'u64'
            bname: 'u64'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned long long'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'charptr'
            tname: 'charptr'
            bname: 'charptr'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'char *'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'voidptr'
            tname: 'voidptr'
            bname: 'voidptr'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'void *'
            })
            is_array: false
        }, types.Type{
            mod: ''
            name: 'void_'
            tname: 'void_'
            bname: 'void_'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'void'
            })
            is_array: false
        }]
        type_idx: {'i8': 0, 'i16': 1, 'int': 2, 'i64': 3, 'byte': 4, 'u16': 5, 'u32': 6, 'u64': 7, 'charptr': 8, 'voidptr': 9, 'void_': 10}
    }
}