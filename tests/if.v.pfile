ast.File{
    mod: 'main'
    stmts: [ast.Stmt(ast.ModuleStmt{
        pos: token.Position{
            file: './tests/if.v'
            line_nr: 0
            char_nr: 0
        }
        name: 'main'
    }), ast.Stmt(ast.FunctionStmt{
        pos: token.Position{
            file: './tests/if.v'
            line_nr: 2
            char_nr: 3
        }
        is_pub: false
        name: 'main'
        ret: types.Type{
            mod: ''
            name: 'void_'
            tname: 'void_'
            bname: 'void_'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'void'
            })
        }
        parameter: []
        attrs_pos: token.Position{
            file: './tests/if.v'
            line_nr: 2
            char_nr: 0
        }
        attrs: []
        mod: 'main'
        stmts: [ast.Stmt(ast.IfStmt{
            pos: token.Position{
                file: './tests/if.v'
                line_nr: 3
                char_nr: 1
            }
            cond: ast.Expr(ast.IdentExpr{
                pos: token.Position{
                    file: './tests/if.v'
                    line_nr: 3
                    char_nr: 4
                }
                expr: unknown sum type value
                name: 'ab'
            })
            stmts: [ast.Stmt(ast.FunctionCallStmt{
                pos: token.Position{
                    file: './tests/if.v'
                    line_nr: 4
                    char_nr: 2
                }
                mod: 'eprintln'
                name: 'eprintln'
                params: [ast.Expr(ast.StringExpr{
                    pos: token.Position{
                        file: './tests/if.v'
                        line_nr: 4
                        char_nr: 11
                    }
                    str: ''test''
                })]
            })]
            elses: [ast.ElseStmt{
                pos: token.Position{
                    file: './tests/if.v'
                    line_nr: 5
                    char_nr: 3
                }
                has_cond: true
                cond: ast.Expr(ast.IdentExpr{
                    pos: token.Position{
                        file: './tests/if.v'
                        line_nr: 5
                        char_nr: 11
                    }
                    expr: unknown sum type value
                    name: 'c'
                })
                stmts: [ast.Stmt(ast.FunctionCallStmt{
                    pos: token.Position{
                        file: './tests/if.v'
                        line_nr: 6
                        char_nr: 2
                    }
                    mod: 'eprintln'
                    name: 'eprintln'
                    params: [ast.Expr(ast.StringExpr{
                        pos: token.Position{
                            file: './tests/if.v'
                            line_nr: 6
                            char_nr: 11
                        }
                        str: ''abc''
                    })]
                })]
            }, ast.ElseStmt{
                pos: token.Position{
                    file: './tests/if.v'
                    line_nr: 7
                    char_nr: 3
                }
                has_cond: false
                cond: ast.Expr(ast.Unknown{})
                stmts: [ast.Stmt(ast.FunctionCallStmt{
                    pos: token.Position{
                        file: './tests/if.v'
                        line_nr: 8
                        char_nr: 2
                    }
                    mod: 'eprintln'
                    name: 'eprintln'
                    params: [ast.Expr(ast.NumberExpr{
                        pos: token.Position{
                            file: './tests/if.v'
                            line_nr: 8
                            char_nr: 11
                        }
                        num: '123'
                    })]
                })]
            }]
        })]
    })]
    table: &types.Table{
        types: [types.Type{
            mod: ''
            name: 'i8'
            tname: 'i8'
            bname: 'i8'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed char'
            })
        }, types.Type{
            mod: ''
            name: 'i16'
            tname: 'i16'
            bname: 'i16'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed short'
            })
        }, types.Type{
            mod: ''
            name: 'int'
            tname: 'int'
            bname: 'int'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed long'
            })
        }, types.Type{
            mod: ''
            name: 'i64'
            tname: 'i64'
            bname: 'i64'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'signed long long'
            })
        }, types.Type{
            mod: ''
            name: 'byte'
            tname: 'byte'
            bname: 'byte'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned char'
            })
        }, types.Type{
            mod: ''
            name: 'u16'
            tname: 'u16'
            bname: 'u16'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned short'
            })
        }, types.Type{
            mod: ''
            name: 'u32'
            tname: 'u32'
            bname: 'u32'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned long'
            })
        }, types.Type{
            mod: ''
            name: 'u64'
            tname: 'u64'
            bname: 'u64'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'unsigned long long'
            })
        }, types.Type{
            mod: ''
            name: 'charptr'
            tname: 'charptr'
            bname: 'charptr'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'char *'
            })
        }, types.Type{
            mod: ''
            name: 'voidptr'
            tname: 'voidptr'
            bname: 'voidptr'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'void *'
            })
        }, types.Type{
            mod: ''
            name: 'void_'
            tname: 'void_'
            bname: 'void_'
            kind: builtin
            info: types.Info(types.Builtin{
                cbase: 'void'
            })
        }]
        type_idx: {'i8': 0, 'i16': 1, 'int': 2, 'i64': 3, 'byte': 4, 'u16': 5, 'u32': 6, 'u64': 7, 'charptr': 8, 'voidptr': 9, 'void_': 10}
    }
}